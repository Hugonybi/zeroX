generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  buyer
  artist
  admin
}

enum KycStatus {
  none
  pending
  verified
  rejected
}

enum ArtworkType {
  physical
  digital
}

enum ArtworkStatus {
  draft
  published
  sold
  removed
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum OrderStatus {
  created
  processing
  fulfilled
  cancelled
  mint_failed
  ownership_mint_failed
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  passwordHash    String
  role            UserRole         @default(buyer)
  name            String
  bio             String?
  kycStatus       KycStatus        @default(none)
  failedLoginAttempts Int          @default(0)
  lockedUntil     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  artworks        Artwork[]
  orders          Order[]          @relation("BuyerOrders")
  ownershipTokens OwnershipToken[]
  refreshTokens   RefreshToken[]
  artistProfile   ArtistProfile?
}

model Artwork {
  id              String           @id @default(uuid())
  artist          User             @relation(fields: [artistId], references: [id])
  artistId        String
  title           String
  description     String
  type            ArtworkType
  mediaUrl        String
  metadataUrl     String?
  serialNumber    String?
  edition         Int?
  priceCents      Int
  currency        String
  status          ArtworkStatus    @default(draft)
  
  // Enhanced fields for MVP shopping experience
  medium          String?
  category        String?
  tags            String[]         @default([])
  yearCreated     Int?
  dimensionHeight Float?
  dimensionWidth  Float?
  dimensionDepth  Float?
  dimensionUnit   String?          @default("cm")
  
  // Inventory management
  isUnique        Boolean          @default(true)
  totalQuantity   Int              @default(1)
  availableQuantity Int            @default(1)
  reservedQuantity  Int            @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orders          Order[]
  authTokens      AuthToken[]
  ownershipTokens OwnershipToken[]
  
  @@index([status])
  @@index([artistId])
  @@index([priceCents])
  @@index([category])
}

model Order {
  id             String          @id @default(uuid())
  buyer          User            @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId        String
  artwork        Artwork         @relation(fields: [artworkId], references: [id])
  artworkId      String
  amountCents    Int
  currency       String
  paymentProvider String
  paymentStatus  PaymentStatus   @default(pending)
  orderStatus    OrderStatus     @default(created)
  reference      String          @unique
  
  // Enhanced checkout fields
  quantity       Int             @default(1)
  unitPriceCents Int?
  shippingCents  Int             @default(0)
  taxCents       Int             @default(0)
  totalCents     Int?
  
  // Shipping information
  shippingAddress Json?
  shippingMethod  String?
  trackingNumber  String?
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  authToken      AuthToken?
  ownershipToken OwnershipToken?
  
  @@index([buyerId])
  @@index([artworkId])
  @@index([orderStatus])
}

model AuthToken {
  id              String          @id @default(uuid())
  artwork         Artwork         @relation(fields: [artworkId], references: [id])
  artworkId       String
  order           Order           @relation(fields: [orderId], references: [id])
  orderId         String          @unique
  hederaTokenId   String
  hederaTxHash    String
  metadataIpfs    String
  mintedBy        String
  mintedAt        DateTime        @default(now())
  ownershipTokens OwnershipToken[]
}

model OwnershipToken {
  id                   String     @id @default(uuid())
  artwork              Artwork    @relation(fields: [artworkId], references: [id])
  artworkId            String
  owner                User       @relation(fields: [ownerId], references: [id])
  ownerId              String
  order                Order      @relation(fields: [orderId], references: [id])
  orderId              String     @unique
  authenticityToken    AuthToken  @relation(fields: [authenticityTokenId], references: [id])
  authenticityTokenId  String
  hederaTokenId        String
  hederaTxHash         String
  metadataIpfs         String
  transferable         Boolean    @default(true)
  fractions            Int        @default(1)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  action     String
  metaJson   Json
  createdAt  DateTime @default(now())
}

model RefreshToken {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  token        String   @unique
  isRevoked    Boolean  @default(false)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  revokedAt    DateTime?
  replacedBy   String?  // Token ID that replaced this one (for rotation tracking)

  @@index([userId])
  @@index([token])
}

model ArtistProfile {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique
  displayName   String?
  bio           String?
  profileImage  String?
  
  // Social and professional links
  website       String?
  instagram     String?
  twitter       String?
  
  // Professional information
  education     String?
  exhibitions   String[]  @default([])
  awards        String[]  @default([])
  
  // Platform statistics
  totalSales    Int       @default(0)
  averageRating Float?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId])
}
