generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  buyer
  artist
  admin
}

enum KycStatus {
  none
  pending
  verified
  rejected
}

enum ArtworkType {
  physical
  digital
}

enum ArtworkStatus {
  draft
  published
  sold
  removed
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum OrderStatus {
  created
  processing
  fulfilled
  cancelled
  mint_failed
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         UserRole  @default(buyer)
  name         String
  bio          String?
  kycStatus    KycStatus @default(none)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  artworks     Artwork[]
  orders       Order[]   @relation("BuyerOrders")
}

model Artwork {
  id           String        @id @default(uuid())
  artist       User          @relation(fields: [artistId], references: [id])
  artistId     String
  title        String
  description  String
  type         ArtworkType
  mediaUrl     String
  metadataUrl  String?
  serialNumber String?
  edition      Int?
  priceCents   Int
  currency     String
  status       ArtworkStatus @default(draft)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]
  authTokens   AuthToken[]
}

model Order {
  id              String        @id @default(uuid())
  buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId         String
  artwork         Artwork       @relation(fields: [artworkId], references: [id])
  artworkId       String
  amountCents     Int
  currency        String
  paymentProvider String
  paymentStatus   PaymentStatus @default(pending)
  orderStatus     OrderStatus   @default(created)
  reference       String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  authToken       AuthToken?
}

model AuthToken {
  id             String   @id @default(uuid())
  artwork        Artwork  @relation(fields: [artworkId], references: [id])
  artworkId      String
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        String   @unique
  hederaTokenId  String
  hederaTxHash   String
  metadataIpfs   String
  mintedBy       String
  mintedAt       DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  action     String
  metaJson   Json
  createdAt  DateTime @default(now())
}
